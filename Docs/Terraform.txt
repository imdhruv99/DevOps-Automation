h2. Terraform
----

- Terraform is an open source provisioning declarative tool that based on Infrastructure as a Code paradigm.
- It's written in Golang and used Hashicorp Configuration Language(HCL).
- it works with all major Cloud Providers and provides common language to orchestrate the infrastructure resources.

h3. *Terraform Workflow*

- Terraform workflow contains init, validate, plan, apply, refresh, destroy, import, toint, fmt and console.

- *init:* Initializes a working directory containing Terraform configuration files. It performs module installation, bckend initialization and more. 
It's safe to run multiple times and does not delete the existing configuration or state.

- *validate:* It is used to validate/check the syntax of the Terraform files

- *plan:* It will scan all *.tf files in the directory and create the execution plan, calculates the difference between the last-known state and the current state and presents this difference as the output 
of the terraform plan operation to user in their terminal. It does not modify the infrastructure or state.

- *apply:* It scans the current directory for the configuration and applies the changes appropriately. It will modify the infrastructure and the state.

- *refresh:* It is used to reconcile the state Terraform knows with the real-world infrastructure. It does not modify infrastructure, but does modify the state file.

- *destroy:* It destroy the infrastructure and all resources and modifies both state and infrastructure.

- *import:* It helps import already-existing external resources, not managed by Terraform, into Terraform state and allow it to manage those resources

- *toint:* It marks a Terraform-managed resource as tainted, forcing it to be destroyed and recreated on the next apply. 
It will not modify infrastructure, but does modify the state file in order to mark a resource as tainted.

- *fmt:* It use to format to lint the code into a standard format.

- *console:* It is a command provides an interactive console for evaluating expressions.


h3. *Creating AWS EC2 Instance using Terraform*

- I will create instance named as *go_web_app* , security group named as *go_web_app_sg* and EIP as *go_web_app_eip*

No Instance running currenly

!screenshot-6.png|thumbnail! 

No Security group named as my security group

!screenshot-7.png|thumbnail! 

*ec2.tf*

- This file will create single ec2 instance. instance_type is t2.micro, AMI is Ubuntu Server 20.04 LTS and it will open port 9009 with the help of SG along with other ports


{code:java}
resource "aws_instance" "go_web_app" {
  ami             = "ami-09e67e426f25ce0d7"
  key_name        = "my-server"
  instance_type   = "t2.micro"
  security_groups = ["go_web_app_sg"]
  tags = {
    Name = "go_web_app"
  }
}
#Create security group with firewall rules
resource "aws_security_group" "go_web_app_sg" {
  name        = "go_web_app_sg"
  description = "SG for go web app"

  ingress {
    from_port   = 9009
    to_port     = 9009
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  # outbound ports
  egress {
    from_port   = 0
    to_port     = 65535
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "go_web_app_sg"
  }
}

# Create Elastic IP address
resource "aws_eip" "go_web_app" {
  vpc      = true
  instance = aws_instance.go_web_app.id
  tags = {
    Name = "go_web_app_eip"
  }
}
{code}

*Formatting the file using fmt*

{code:java}
dprajapati@C02CTK50MD6M terraform % terraform fmt
ec2.tf
dprajapati@C02CTK50MD6M terraform % 
{code}

*terraform init*

{code:java}
dprajapati@C02CTK50MD6M terraform % terraform init

Initializing the backend...

Initializing provider plugins...
- Reusing previous version of hashicorp/aws from the dependency lock file
- Using previously-installed hashicorp/aws v3.40.0

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.
dprajapati@C02CTK50MD6M terraform % 
{code} 

*terraform validate*
{code:java}
dprajapati@C02CTK50MD6M terraform % terraform validate
Success! The configuration is valid.

dprajapati@C02CTK50MD6M terraform % 
{code}

*terraform plan*
{code:java}
dprajapati@C02CTK50MD6M terraform % terraform plan
provider.aws.region
  The region where AWS operations will take place. Examples
  are us-east-1, us-west-2, etc.

  Enter a value: us-east-1


Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_eip.go_web_app will be created
  + resource "aws_eip" "go_web_app" {
      + allocation_id        = (known after apply)
      + association_id       = (known after apply)
      + carrier_ip           = (known after apply)
      + customer_owned_ip    = (known after apply)
      + domain               = (known after apply)
      + id                   = (known after apply)
      + instance             = (known after apply)
      + network_border_group = (known after apply)
      + network_interface    = (known after apply)
      + private_dns          = (known after apply)
      + private_ip           = (known after apply)
      + public_dns           = (known after apply)
      + public_ip            = (known after apply)
      + public_ipv4_pool     = (known after apply)
      + tags                 = {
          + "Name" = "go_web_app_elastic_ip"
        }
      + tags_all             = {
          + "Name" = "go_web_app_elastic_ip"
        }
      + vpc                  = true
    }

  # aws_instance.go_web_app will be created
  + resource "aws_instance" "go_web_app" {
      + ami                                  = "ami-09e67e426f25ce0d7"
      + arn                                  = (known after apply)
      + associate_public_ip_address          = (known after apply)
      + availability_zone                    = (known after apply)
      + cpu_core_count                       = (known after apply)
      + cpu_threads_per_core                 = (known after apply)
      + get_password_data                    = false
      + host_id                              = (known after apply)
      + id                                   = (known after apply)
      + instance_initiated_shutdown_behavior = (known after apply)
      + instance_state                       = (known after apply)
      + instance_type                        = "t2.micro"
      + ipv6_address_count                   = (known after apply)
      + ipv6_addresses                       = (known after apply)
      + key_name                             = "my-server"
      + outpost_arn                          = (known after apply)
      + password_data                        = (known after apply)
      + placement_group                      = (known after apply)
      + primary_network_interface_id         = (known after apply)
      + private_dns                          = (known after apply)
      + private_ip                           = (known after apply)
      + public_dns                           = (known after apply)
      + public_ip                            = (known after apply)
      + secondary_private_ips                = (known after apply)
      + security_groups                      = [
          + "gowebapp_security_group",
        ]
      + source_dest_check                    = true
      + subnet_id                            = (known after apply)
      + tags                                 = {
          + "Name" = "go_web_app"
        }
      + tags_all                             = {
          + "Name" = "go_web_app"
        }
      + tenancy                              = (known after apply)
      + vpc_security_group_ids               = (known after apply)

      + ebs_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + snapshot_id           = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }

      + enclave_options {
          + enabled = (known after apply)
        }

      + ephemeral_block_device {
          + device_name  = (known after apply)
          + no_device    = (known after apply)
          + virtual_name = (known after apply)
        }

      + metadata_options {
          + http_endpoint               = (known after apply)
          + http_put_response_hop_limit = (known after apply)
          + http_tokens                 = (known after apply)
        }

      + network_interface {
          + delete_on_termination = (known after apply)
          + device_index          = (known after apply)
          + network_interface_id  = (known after apply)
        }

      + root_block_device {
          + delete_on_termination = (known after apply)
          + device_name           = (known after apply)
          + encrypted             = (known after apply)
          + iops                  = (known after apply)
          + kms_key_id            = (known after apply)
          + tags                  = (known after apply)
          + throughput            = (known after apply)
          + volume_id             = (known after apply)
          + volume_size           = (known after apply)
          + volume_type           = (known after apply)
        }
    }

  # aws_security_group.gowebapp_security_group will be created
  + resource "aws_security_group" "gowebapp_security_group" {
      + arn                    = (known after apply)
      + description            = "security group for jenkins"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 65535
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 22
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 22
            },
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 443
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 443
            },
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 80
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 80
            },
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 9009
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 9009
            },
        ]
      + name                   = "gowebapp_security_group"
      + name_prefix            = (known after apply)
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags                   = {
          + "Name" = "gowebapp_security_group"
        }
      + tags_all               = {
          + "Name" = "gowebapp_security_group"
        }
      + vpc_id                 = (known after apply)
    }

Plan: 3 to add, 0 to change, 0 to destroy.

─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if you run "terraform apply" now.

{code}

*terraform apply*
{code:java}
Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

aws_security_group.gowebapp_security_group: Destroying... [id=sg-0df3a453d18fb896a]
aws_instance.go_web_app: Creating...
aws_security_group.go_web_app_sg: Creating...
aws_security_group.gowebapp_security_group: Destruction complete after 3s
aws_instance.go_web_app: Still creating... [10s elapsed]
aws_security_group.go_web_app_sg: Still creating... [10s elapsed]
aws_security_group.go_web_app_sg: Creation complete after 11s [id=sg-00735645ed4d3cdcc]
aws_instance.go_web_app: Still creating... [20s elapsed]
aws_instance.go_web_app: Still creating... [30s elapsed]
aws_instance.go_web_app: Creation complete after 35s [id=i-05980fe01d64dd975]
aws_eip.go_web_app: Creating...
aws_eip.go_web_app: Creation complete after 4s [id=eipalloc-0c2c5ec43667c04f6]

Apply complete! Resources: 3 added, 0 changed, 1 destroyed.

{code}

Instance is created with given instance configuration

!screenshot-8.png|thumbnail! 

Security Group Created with configuration

!screenshot-11.png|thumbnail! 

Inbound Rules
!screenshot-10.png|thumbnail! 

Outbound Rules
!screenshot-12.png|thumbnail! 

*terraform state list*
{code:java}
dprajapati@C02CTK50MD6M terraform % terraform state list
aws_eip.go_web_app
aws_instance.go_web_app
aws_security_group.go_web_app_sg
dprajapati@C02CTK50MD6M terraform % 
{code}

*terraform destroy*

{code:java}
Do you really want to destroy all resources?
  Terraform will destroy all your managed infrastructure, as shown above.
  There is no undo. Only 'yes' will be accepted to confirm.

  Enter a value: yes

aws_eip.go_web_app: Destroying... [id=eipalloc-0c2c5ec43667c04f6]
aws_security_group.go_web_app_sg: Destroying... [id=sg-00735645ed4d3cdcc]
aws_eip.go_web_app: Destruction complete after 5s
aws_instance.go_web_app: Destroying... [id=i-05980fe01d64dd975]
aws_security_group.go_web_app_sg: Still destroying... [id=sg-00735645ed4d3cdcc, 10s elapsed]
aws_instance.go_web_app: Still destroying... [id=i-05980fe01d64dd975, 10s elapsed]
aws_security_group.go_web_app_sg: Still destroying... [id=sg-00735645ed4d3cdcc, 20s elapsed]
aws_instance.go_web_app: Still destroying... [id=i-05980fe01d64dd975, 20s elapsed]
aws_security_group.go_web_app_sg: Still destroying... [id=sg-00735645ed4d3cdcc, 30s elapsed]
aws_instance.go_web_app: Still destroying... [id=i-05980fe01d64dd975, 30s elapsed]
aws_security_group.go_web_app_sg: Still destroying... [id=sg-00735645ed4d3cdcc, 40s elapsed]
aws_instance.go_web_app: Still destroying... [id=i-05980fe01d64dd975, 40s elapsed]
aws_security_group.go_web_app_sg: Still destroying... [id=sg-00735645ed4d3cdcc, 50s elapsed]
aws_instance.go_web_app: Still destroying... [id=i-05980fe01d64dd975, 50s elapsed]
aws_security_group.go_web_app_sg: Still destroying... [id=sg-00735645ed4d3cdcc, 1m0s elapsed]
aws_instance.go_web_app: Still destroying... [id=i-05980fe01d64dd975, 1m0s elapsed]
aws_security_group.go_web_app_sg: Still destroying... [id=sg-00735645ed4d3cdcc, 1m10s elapsed]
aws_instance.go_web_app: Still destroying... [id=i-05980fe01d64dd975, 1m10s elapsed]
aws_security_group.go_web_app_sg: Still destroying... [id=sg-00735645ed4d3cdcc, 1m20s elapsed]
aws_instance.go_web_app: Destruction complete after 1m15s
aws_security_group.go_web_app_sg: Destruction complete after 1m26s

Destroy complete! Resources: 3 destroyed.
{code}

Instance destroyed 

!screenshot-6.png|thumbnail! 

SG is deleted

!screenshot-7.png|thumbnail! 